链表
可以利用不连续内存空间，不会出现内存无法分配出一大块连续空间的问题，自然没法快速计算地址位置（编号）
插入删除数据，不必保持内存空间的连续性而搬移节点，所以快速。
单向，循环，双向，双向循环链表，空间换时间

如何基于链表实现LRU缓存淘汰算法？
要表达出经常用的排在前面，不经常用的淘汰掉，表达出这种规则、秩序
”维护一个有序单链表，头部是最新访问的，尾部是最早访问的“
当有一个新数据被访问时，从链表头开始顺序遍历链表
1.当链表中找到该数据，则删除该节点，将该数据插入到链表头
2.如果没有找到该数据，如果缓存已满，则删除尾节点，将该数据插入到链表头
  如果没有找到该数据，如果缓存不满，则将该数据插入到链表头
时间复杂度O(n)

CPU缓存机制是指什么？
CPU从内存读取数据的时候，会把读取的数据加载到CPU缓存中，但并不只是该数据，而是读取一个数据块，这样查找时
会先从CPU缓存数据块查找。

如何快速找到链表的中点？
使用快慢指针，慢指针每次前进一步，快指针每次前进两步，当快指针到尾部，慢指针指向中心。


技巧1：理解指针或者引用的含义
计算要给一切事物都编上号，对应内存地址，指针、引用就是内存地址（编号），计算机能通过此编号，找到里面对应的数值。
技巧2：警惕指针丢失和内存泄漏
操作时注意顺序
技巧3：利用哨兵简化实现难度
创建一个链表假头
技巧4：重点留意边界条件处理
-如果链表为空，代码是否能正常工作
-如果链表只包含一个节点，代码是否能正常工作
-如果链表只包含两个节点，代码是否能正常工作
-代码逻辑在处理头节点和尾节点，是否能正常工作
技巧5：举例画图，辅助思考
技巧6：多写多练，没有捷径
