散列表用的是数组支持按照下标随机访问数据的特性，所以散列表其实就是数组的一种扩展，由数组演化而来。可以说，如果没有数组，就没有散列表。

散列表用的就是数组支持按照下标随机访问的时候，时间复杂度是 O(1) 的特性。
我们通过散列函数把元素的键值映射为下标，然后将数据存储在数组中对应下标的位置。
当我们按照键值查询元素时，我们用同样的散列函数，将键值转化数组下标，从对应的数组下标的位置取数据。

该如何构造散列函数呢？三点散列函数设计的基本要求：
散列函数计算得到的散列值是一个非负整数；
如果 key1 = key2，那 hash(key1) == hash(key2)；
如果 key1 ≠ key2，那 hash(key1) ≠ hash(key2)。如果==则说产生了散列冲突

再好的散列函数也无法避免散列冲突。那究竟该如何解决散列冲突问题呢？
1. 开放寻址法
开放寻址法的核心思想是，如果出现了散列冲突，我们就重新探测一个空闲位置，将其插入。

1.1线性探测方法
删除操作稍微有些特别。我们不能单纯地把要删除的元素设置为空。
在查找的时候，一旦我们通过线性探测方法，找到一个空闲位置，我们就可以认定散列表中不存在这个数据。
但是，如果这个空闲位置是我们后来删除的，就不会再继续遍历后序位置，漏查数据，导致原来的查找算法失效。
我们可以将删除的元素，特殊标记为 deleted。当线性探测查找的时候，遇到标记为 deleted 的空间，并不是停下来，而是继续往下探测。
1.2二次探测，跟线性探测很像，线性探测每次探测的步长是 1，那它探测的下标序列就是 hash(key)+0，hash(key)+1，hash(key)+2……
而二次探测探测的步长就变成了原来的“二次方”，也就是说，它探测的下标序列就是 hash(key)+0，hash(key)+12，hash(key)+22……
1.3所谓双重散列，意思就是不仅要使用一个散列函数。我们使用一组散列函数 hash1(key)，hash2(key)，hash3(key)……
我们先用第一个散列函数，如果计算得到的存储位置已经被占用，再用第二个散列函数，依次类推，直到找到空闲的存储位置。
不管采用哪种探测方法，当散列表中空闲位置不多的时候，散列冲突的概率就会大大提高。为了尽可能保证散列表的操作效率，
一般情况下，我们会尽可能保证散列表中有一定比例的空闲槽位。我们用装载因子（load factor）来表示空位的多少。
散列表的装载因子=填入表中的元素个数/散列表的长度
随着填入个数增多，要不断复制整个数组到新数组

2. 链表法
在散列表中，每个“桶（bucket）”或者“槽（slot）”会对应一条链表，所有散列值相同的元素我们都放到相同槽位对应的链表中。

问：Word 文档中单词拼写检查功能是如何实现的？
答：常用的英文单词有 20 万个左右，假设单词的平均长度是 10 个字母，平均一个单词占用 10 个字节的内存空间，
那 20 万英文单词大约占 2MB 的存储空间，就算放大 10 倍也就是 20MB。对于现在的计算机来说，这个大小完全可以放在内存里面。
所以我们可以用散列表来存储整个英文单词词典。
当用户输入某个英文单词时，我们拿用户输入的单词去散列表中查找。如果查到，则说明拼写正确；如果没有查到，则说明拼写可能有误，给予提示。

问：假设我们有 10 万条 URL 访问日志，如何按照访问次数给 URL 排序？
答：遍历 10 万条数据，以 URL 为 key，访问次数为 value，存入散列表，同时记录下访问次数的最大值 K，时间复杂度 O(N)。
第一步：遍历，利用golang中用 map[string]int 
第二步：map[string]int 转变为对应的struct结构，
第三步：再利用 func sort.Sort()排序,一个满足sort.Interface接口的（集合）类型可以被本包的函数进行排序，排序完成，可以方便读取对应的URL
或者
第一步：遍历，利用golang中用 map[string]int 
第二步：遍历map,把次数取出，建立int数组，排序
第三步：再遍历map,再利用次数可以索引到该访问次数对应的URL。还是非常繁琐
或者
自己建立散列函数，采用链表法也面临上面的问题，还不如用现有 map[string]int
采用开放寻址法，内存空间使用要求多，不是好方法

问：有两个字符串数组，每个数组大约有 10 万条字符串，如何快速找出两个数组中相同的字符串？
答：以第一个字符串数组构建散列表，key 为字符串，value 为出现次数。
再遍历第二个字符串数组，以字符串为 key 在散列表中查找，如果 value 大于零，说明存在相同字符串。时间复杂度 O(N)。
利用golang中用 map[string]int 可以方便实现