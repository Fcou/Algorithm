鉴权背景介绍
要实现接口鉴权功能，我们需要事先将应用对接口的访问权限规则设置好。当某个应用访问其中一个接口的时候，我们就可以拿应用的请求 URL，在规则中进行匹配。
如果匹配成功，就说明允许访问；如果没有可以匹配的规则，那就说明这个应用没有这个接口的访问权限，我们就拒绝服务。

如何实现快速鉴权？
规则、权利都写成了字符串，本质上就是字符串匹配
不管是哪种匹配模式，我们都可以用散列表来存储不同应用对应的不同规则集合。对于每个应用的规则集合的存储，三种匹配模式使用不同的数据结构。
1. 如何实现精确匹配规则？
针对这种匹配模式，我们可以将每个应用对应的权限规则，存储在一个字符串数组中。
当用户请求到来时，我们拿用户的请求 URL，在这个字符串数组中逐一匹配，匹配的算法就是我们之前学过的字符串匹配算法（比如 KMP、BM、BF 等）。
规则不会经常变动，所以，为了加快匹配速度，我们可以按照字符串的大小给规则排序，把它组织成有序数组这种数据结构。
当要查找某个 URL 能否匹配其中某条规则的时候，我们可以采用二分查找算法，在有序数组中进行匹配。

2. 如何实现前缀匹配规则？
针对这个需求，我们可以将每个用户的规则集合，组织成 Trie 树这种数据结构。
Trie 树中的每个节点不是存储单个字符，而是存储接口被“/”分割之后的子目录（比如“/user/name”被分割为“user”“name”两个子目录）。

3. 如何实现模糊匹配规则？
我们采用回溯算法，拿请求 URL 跟每条规则逐一进行模糊匹配。
于是，我们可以把不包含通配符的规则和包含通配符的规则分开处理。

限流背景介绍
按照不同的限流粒度，限流可以分为很多种类型。比如给每个接口限制不同的访问频率，或者给所有接口限制总的访问频率，又或者更细粒度地限制某个应用对某个接口的访问频率等等。


如何实现精准限流？
最简单的限流算法叫固定时间窗口限流算法。这种算法是如何工作的呢？
首先我们需要选定一个时间起点，之后每当有接口请求到来，我们就将计数器加一。
如果在当前时间窗口内，根据限流规则（比如每秒钟最大允许 100 次访问请求），
出现累加访问次数超过限流值的情况时，我们就拒绝后续的访问请求。当进入下一个时间窗口之后，计数器就清零重新计数。

对固定时间窗口限流算法稍加改造。我们可以限制任意时间窗口（比如 1s）内，接口请求数都不能超过某个阈值（ 比如 100 次）。
因此，相对于固定时间窗口限流算法，这个算法叫滑动时间窗口限流算法。

